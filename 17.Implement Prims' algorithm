//prims algorithm

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

typedef pair<int, int> pii;

void prims(int n, vector<vector<pii>>& adj) {
    vector<bool> inMST(n, false);
    priority_queue<pii, vector<pii>, greater<pii>> pq;

    int totalWeight = 0;
    pq.push({0, 0}); 

    while (!pq.empty()) {
        auto [weight, u] = pq.top();
        pq.pop();

        if (inMST[u]) continue;

        inMST[u] = true;
        totalWeight += weight;

        cout << "Add vertex " << u << " with edge weight " << weight << endl;

        for (auto [w, v] : adj[u]) {
            if (!inMST[v]) {
                pq.push({w, v});
            }
        }
    }

    cout << "Total weight of MST: " << totalWeight << endl<<endl;
}

int main() {
    int n, e;
    cout << "Enter number of vertices: ";
    cin >> n;
    cout << "Enter number of edges: ";
    cin >> e;

    vector<vector<pii>> adj(n);

    cout << "Enter edges (format: u v weight):\n";
    for (int i = 0; i < e; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].push_back({w, v});
        adj[v].push_back({w, u});
    }

    prims(n, adj);
    return 0;
}
