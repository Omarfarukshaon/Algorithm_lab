#include <iostream>
#include <climits>
using namespace std;

const int MAX = 100;

// Function to find vertex with minimum distance value
int minDistance(int dist[], bool visited[], int V) {
    int min = INT_MAX, minIndex;
    for (int v = 0; v < V; v++)
        if (!visited[v] && dist[v] < min)
            min = dist[v], minIndex = v;
    return minIndex;
}

int main() {
    int V;
    cout << "Enter number of vertices: ";
    cin >> V;

    int graph[MAX][MAX];
    cout << "Enter adjacency matrix (0 if no edge, weight if edge):\n";
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            cin >> graph[i][j];

    int source;
    cout << "Enter source vertex (0 to " << V - 1 << "): ";
    cin >> source;

    int dist[MAX];       // Shortest distances from source
    bool visited[MAX];   // Visited vertices

    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        visited[i] = false;
    }

    dist[source] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited, V);
        visited[u] = true;

        for (int v = 0; v < V; v++)
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }

    cout << "\nShortest distances from vertex " << source << ":\n";
    for (int i = 0; i < V; i++)
        cout << "To " << i << " : " << dist[i] << endl;

    return 0;
}
